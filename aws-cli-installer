#!/usr/bin/env bash
set -euo pipefail

scriptname="$(basename "$0")"
scriptversion="v1.0.0-dev"

if ! unzip -h 2 &>/dev/null; then
  echo "ERROR: unzip not installed and required"
  exit 1
fi

if curl -h 2 &>/dev/null; then
  nettool="curl"
elif wget -h 2 &>/dev/null; then
  nettool="wget"
else
  echo "ERROR: wget or curl not installed and required"
  exit 1
fi

usage() {
  cat 1>&2 <<EOF
Usage: $scriptname [OPTIONS]

Options:
    -h, --help          Display this message
    -v, --version <version>
                        Specify AWS CLI version to install
    -i, --install-dir <path>
                        The directory to install the AWS CLI v2. By default,
                        this directory is /opt/aws-cli
    -b, --bin-dir <path>
                        The directory to store symlinks to executables for the
                        AWS CLI v2. By default, this directory is
                        /usr/local/bin
    -k, --keep-tmp      Keep temporary files in current directory
    -g, --gpg-check     Verify signature with GPG
    --gpg-autoimport    Automatically import the AWS CLI Team's GPG key
    -u, --uninstall     Uninstall AWS CLI
EOF
}

version="latest"
keep_tmp_files=false
root_install_dir="/opt/aws-cli"
bin_dir="/usr/local/bin"
gpg_check=false
gpg_autoimport=false
uninstall=false

while [[ $# -gt 0 ]]; do
  case $1 in
  -h | --help)
    usage
    exit
    ;;
  -v | --version)
    if [ -z "${2:-}" ]; then
      echo "$scriptname $scriptversion"
      echo "See $scriptname --help for usage."
      exit 0
    fi
    version="$2"
    shift
    shift
    ;;
  -i | --install-dir)
    install_dir="${2:-}"
    if [ -z "$install_dir" ]; then
      echo 'ERROR: --install-dir requires a parameter'
      exit 1
    fi
    if [ ! -d "$install_dir" ]; then
      echo "ERROR: --install-dir '$install_dir' does not exist"
      exit 1
    fi
    root_install_dir="$(readlink -e "$install_dir")"
    shift
    shift
    ;;
  -b | --bin-dir)
    bin_dir="${2:=}"
    if [ -z "$bin_dir" ]; then
      echo 'ERROR: --bin-dir requires a parameter'
      exit 1
    fi
    if [ ! -d "$bin_dir" ]; then
      echo "ERROR: --bin-dir '$bin_dir' does not exist"
      exit 1
    fi
    bin_dir="$(readlink -e "$bin_dir")"
    shift
    shift
    ;;
  -k | --keep-tmp)
    keep_tmp_files=true
    shift
    ;;
  -g | --gpg-check)
    gpg_check=true
    shift
    ;;
  --gpg-autoimport)
    gpg_autoimport=true
    shift
    ;;
  -u | --uninstall)
    uninstall=true
    shift
    ;;
  *)
    echo "ERROR: got unexpected argument: '$1'"
    exit 1
    ;;
  esac
done

exe_name="aws"
completer_exe_name="aws_completer"

if [ "$uninstall" = true ]; then
  [ -n "$root_install_dir" ]
  [ -n "$bin_dir" ]
  rm -rf "$root_install_dir"
  rm "$bin_dir/$exe_name"
  rm "$bin_dir/$completer_exe_name"
  exit 0
fi

# https://docs.aws.amazon.com/cli/latest/userguide/getting-started-version.html
gpg_key="
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBF2Cr7UBEADJZHcgusOJl7ENSyumXh85z0TRV0xJorM2B/JL0kHOyigQluUG
ZMLhENaG0bYatdrKP+3H91lvK050pXwnO/R7fB/FSTouki4ciIx5OuLlnJZIxSzx
PqGl0mkxImLNbGWoi6Lto0LYxqHN2iQtzlwTVmq9733zd3XfcXrZ3+LblHAgEt5G
TfNxEKJ8soPLyWmwDH6HWCnjZ/aIQRBTIQ05uVeEoYxSh6wOai7ss/KveoSNBbYz
gbdzoqI2Y8cgH2nbfgp3DSasaLZEdCSsIsK1u05CinE7k2qZ7KgKAUIcT/cR/grk
C6VwsnDU0OUCideXcQ8WeHutqvgZH1JgKDbznoIzeQHJD238GEu+eKhRHcz8/jeG
94zkcgJOz3KbZGYMiTh277Fvj9zzvZsbMBCedV1BTg3TqgvdX4bdkhf5cH+7NtWO
lrFj6UwAsGukBTAOxC0l/dnSmZhJ7Z1KmEWilro/gOrjtOxqRQutlIqG22TaqoPG
fYVN+en3Zwbt97kcgZDwqbuykNt64oZWc4XKCa3mprEGC3IbJTBFqglXmZ7l9ywG
EEUJYOlb2XrSuPWml39beWdKM8kzr1OjnlOm6+lpTRCBfo0wa9F8YZRhHPAkwKkX
XDeOGpWRj4ohOx0d2GWkyV5xyN14p2tQOCdOODmz80yUTgRpPVQUtOEhXQARAQAB
tCFBV1MgQ0xJIFRlYW0gPGF3cy1jbGlAYW1hem9uLmNvbT6JAlQEEwEIAD4CGwMF
CwkIBwIGFQoJCAsCBBYCAwECHgECF4AWIQT7Xbd/1cEYuAURraimMQrMRnJHXAUC
ZqFYbwUJCv/cOgAKCRCmMQrMRnJHXKYuEAC+wtZ611qQtOl0t5spM9SWZuszbcyA
0xBAJq2pncnp6wdCOkuAPu4/R3UCIoD2C49MkLj9Y0Yvue8CCF6OIJ8L+fKBv2DI
yWZGmHL0p9wa/X8NCKQrKxK1gq5PuCzi3f3SqwfbZuZGeK/ubnmtttWXpUtuU/Iz
VR0u/0sAy3j4uTGKh2cX7XnZbSqgJhUk9H324mIJiSwzvw1Ker6xtH/LwdBeJCck
bVBdh3LZis4zuD4IZeBO1vRvjot3Oq4xadUv5RSPATg7T1kivrtLCnwvqc6L4LnF
0OkNysk94L3LQSHyQW2kQS1cVwr+yGUSiSp+VvMbAobAapmMJWP6e/dKyAUGIX6+
2waLdbBs2U7MXznx/2ayCLPH7qCY9cenbdj5JhG9ibVvFWqqhSo22B/URQE/CMrG
+3xXwtHEBoMyWEATr1tWwn2yyQGbkUGANneSDFiTFeoQvKNyyCFTFO1F2XKCcuDs
19nj34PE2TJilTG2QRlMr4D0NgwLLAMg2Los1CK6nXWnImYHKuaKS9LVaCoC8vu7
IRBik1NX6SjrQnftk0M9dY+s0ZbAN1gbdjZ8H3qlbl/4TxMdr87m8LP4FZIIo261
Eycv34pVkCePZiP+dgamEiQJ7IL4ZArio9mv6HbDGV6mLY45+l6/0EzCwkI5IyIf
BfWC9s/USgxchg==
=ptgS
-----END PGP PUBLIC KEY BLOCK-----
"

arch="$(uname -m)"
if [ "$version" = "latest" ]; then
  zip_filename="awscli-exe-linux-$arch.zip"
else
  zip_filename="awscli-exe-linux-$arch-$version.zip"
fi
sig_filename="$zip_filename.sig"

zip_url="https://awscli.amazonaws.com/$zip_filename"
sig_url="$zip_url.sig"

function with_backoff {
  local max_attempts=${ATTEMPTS-5}
  local timeout=${TIMEOUT-1}
  local attempt=0
  local exit_code=0

  set +e
  while [[ $attempt -lt $max_attempts ]]; do
    "$@"
    exit_code=$?

    if [[ $exit_code == 0 ]]; then
      set -e
      break
    fi

    echo "Failure running ($*) [$exit_code]; retrying in $timeout." 1>&2
    sleep "$timeout"
    attempt=$((attempt + 1))
    timeout=$((timeout * 2))
  done

  if [[ $exit_code != 0 ]]; then
    echo "Failure running ($*) [$exit_code]; No more retries left." 1>&2
  fi

  set -e
  return $exit_code
}

cleanup() {
  # shellcheck disable=SC2317
  if [ "$keep_tmp_files" != true ]; then
    if [ -f "$zip_filename" ]; then
      rm "$zip_filename"
    fi
    if [ -f "$sig_filename" ]; then
      rm "$sig_filename"
    fi
    if [ -d "./aws" ]; then
      rm -rf "./aws"
    fi
  fi
}

trap cleanup EXIT

download() {
  # download $1 (URL) to $2 (destination file)
  case "${nettool}" in
  wget*)
    with_backoff wget -q "$1" -O "$2"
    ;;
  curl*)
    with_backoff curl -s -o "$2" "$1"
    ;;
  esac
}

download "$zip_url" "$zip_filename"

# default gpg command
: "${GPG:=gpg}"

if [ "$gpg_autoimport" = true ]; then
  "$GPG" --import <<<"$gpg_key"
fi

if [ "$gpg_check" = true ]; then
  download "$sig_url" "$sig_filename"
  "$GPG" --verify "$sig_filename" "$zip_filename"
fi

# quietly overwrite
unzip -qq -o "$zip_filename"

installer_dir="$(readlink -e ./aws)"

# copy dist to target version
mkdir -p "$root_install_dir"
cp -a "$installer_dir/dist/." "$root_install_dir/"

# /bin symlinks to current
target_bin_aws_exe="$bin_dir/$exe_name"
target_bin_aws_completer_exe="$bin_dir/$completer_exe_name"

ln -sf "$root_install_dir/$exe_name" "$target_bin_aws_exe"
ln -sf "$root_install_dir/$completer_exe_name" "$target_bin_aws_completer_exe"

echo "You can now run: $target_bin_aws_exe --version"
exit 0
